#!/bin/bash

# üóëÔ∏è Script para Remover VPC Espec√≠fica
# Remove uma VPC espec√≠fica da conta AWS com menu interativo

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

success() {
    echo -e "${GREEN}[OK]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[ATEN√á√ÉO]${NC} $1"
}

# =============================================================================
# FUN√á√ÉO PRINCIPAL
# =============================================================================

main() {
    echo "üóëÔ∏è Remover VPC Espec√≠fica"
    echo "========================="
    echo
    
    # Verifica se AWS CLI est√° configurado
    if ! aws sts get-caller-identity &> /dev/null; then
        error "‚ùå AWS CLI n√£o configurado. Configure suas credenciais."
        exit 1
    fi
    
    success "‚úÖ AWS CLI configurado"
    
    # Obt√©m informa√ß√µes da conta
    ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
    REGION=$(aws configure get region || echo "us-east-1")
    
    log "üìä Conta: $ACCOUNT_ID"
    log "üåç Regi√£o: $REGION"
    
    # =============================================================================
    # SELECIONAR VPC
    # =============================================================================
    
    log "üîç Listando VPCs dispon√≠veis para sele√ß√£o..."

    # Declare arrays to hold VPC info
    declare -a VPC_IDS
    declare -a VPC_IS_DEFAULT

    # Read VPCs into arrays and display a menu
    i=0
    echo
    printf "   %-4s %-22s %-18s %-25s %-10s\n" "#" "VPC ID" "CIDR Block" "Name Tag" "Is Default"
    echo "----------------------------------------------------------------------------------------------"

    # Use process substitution to read from aws cli output
    while IFS=$'\t' read -r vpc_id cidr name is_default; do
        VPC_IDS[i]="$vpc_id"
        VPC_IS_DEFAULT[i]="$is_default"
        # Handle case where name is None/null from the aws-cli query
        [ "$name" = "None" ] && name="N/A"
        
        printf "   [%d]  %-22s %-18s %-25s %-10s\n" "$((i+1))" "$vpc_id" "$cidr" "$name" "$is_default"
        i=$((i+1))
    done < <(aws ec2 describe-vpcs --query 'Vpcs[].[VpcId,CidrBlock,Tags[?Key==`Name`].Value|[0],IsDefault]' --output text)
    echo "----------------------------------------------------------------------------------------------"
    echo

    if [ $i -eq 0 ]; then
        success "‚úÖ Nenhuma VPC encontrada na regi√£o $REGION."
        exit 0
    fi
    
    # =============================================================================
    # SOLICITAR ESCOLHA
    # =============================================================================

    VPC_ID=""
    while [ -z "$VPC_ID" ]; do
        read -p "Digite o n√∫mero da VPC que deseja remover (ou 'q' para sair): " choice
        
        if [[ "$choice" == "q" ]]; then
            warning "‚ùå Opera√ß√£o cancelada pelo usu√°rio."
            exit 1
        fi
        
        # Validate if input is a number
        if ! [[ "$choice" =~ ^[0-9]+$ ]]; then
            error "Entrada inv√°lida. Por favor, digite um n√∫mero da lista."
            continue
        fi
        
        # Validate if number is in range
        if [ "$choice" -lt 1 ] || [ "$choice" -gt ${#VPC_IDS[@]} ]; then
            error "N√∫mero fora do intervalo. Escolha um n√∫mero entre 1 e ${#VPC_IDS[@]}."
            continue
        fi
        
        # Get selected VPC ID and its default status
        VPC_ID=${VPC_IDS[$((choice-1))]}
        IS_DEFAULT=${VPC_IS_DEFAULT[$((choice-1))]}
    done

    # Check if the selected VPC is a default VPC
    if [ "$IS_DEFAULT" = "True" ]; then
        warning "‚ö†Ô∏è  A VPC selecionada ($VPC_ID) √© uma VPC DEFAULT!"
        warning "üí°  Para remover a VPC Default com seguran√ßa, use o script './cleanup_default_vpc.sh'."
        exit 1
    fi

    log "üìç VPC Selecionada: $VPC_ID"
    
    # =============================================================================
    # VERIFICAR RECURSOS
    # =============================================================================
    
    log "üîç Verificando recursos na VPC..."
    
    # EC2 Instances
    EC2_INSTANCES=$(aws ec2 describe-instances \
        --filters "Name=vpc-id,Values=$VPC_ID" \
        --query 'Reservations[].Instances[?State.Name!=`terminated`].InstanceId' \
        --output text)
    
    # RDS Instances
    RDS_INSTANCES=$(aws rds describe-db-instances \
        --query "DBInstances[?DBSubnetGroup.VpcId==\`$VPC_ID\`].DBInstanceIdentifier" \
        --output text 2>/dev/null || echo "")
    
    # Load Balancers
    ELB_V1=$(aws elb describe-load-balancers \
        --query "LoadBalancerDescriptions[?VPCId==\`$VPC_ID\`].LoadBalancerName" \
        --output text 2>/dev/null || echo "")
    
    ELB_V2=$(aws elbv2 describe-load-balancers \
        --query "LoadBalancers[?VpcId==\`$VPC_ID\`].LoadBalancerArn" \
        --output text 2>/dev/null || echo "")
    
    # Security Groups (exceto default)
    SECURITY_GROUPS=$(aws ec2 describe-security-groups \
        --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=!default" \
        --query 'SecurityGroups[].GroupId' \
        --output text)
    
    # Internet Gateways
    IGW=$(aws ec2 describe-internet-gateways \
        --filters "Name=attachment.vpc-id,Values=$VPC_ID" \
        --query 'InternetGateways[0].InternetGatewayId' \
        --output text)
    
    # NAT Gateways
    NAT_GATEWAYS=$(aws ec2 describe-nat-gateways \
        --filter "Name=vpc-id,Values=$VPC_ID" \
        --query 'NatGateways[?State!=`deleted`].NatGatewayId' \
        --output text)
    
    # Subnets
    SUBNETS=$(aws ec2 describe-subnets \
        --filters "Name=vpc-id,Values=$VPC_ID" \
        --query 'Subnets[].SubnetId' \
        --output text)
    
    # =============================================================================
    # MOSTRAR RESUMO
    # =============================================================================
    
    echo
    log "üìä Recursos encontrados na VPC $VPC_ID:"
    
    if [ -n "$EC2_INSTANCES" ]; then
        log "   üñ•Ô∏è  EC2 Instances: $EC2_INSTANCES"
    else
        log "   ‚úÖ Nenhuma EC2 Instance"
    fi
    
    if [ -n "$RDS_INSTANCES" ]; then
        log "   üóÑÔ∏è  RDS Instances: $RDS_INSTANCES"
    else
        log "   ‚úÖ Nenhuma RDS Instance"
    fi
    
    if [ -n "$ELB_V1" ]; then
        log "   ‚öñÔ∏è  ELB V1: $ELB_V1"
    else
        log "   ‚úÖ Nenhum ELB V1"
    fi
    
    if [ -n "$ELB_V2" ]; then
        log "   ‚öñÔ∏è  ELB V2: $ELB_V2"
    else
        log "   ‚úÖ Nenhum ELB V2"
    fi
    
    if [ -n "$NAT_GATEWAYS" ]; then
        log "   üåê NAT Gateways: $NAT_GATEWAYS"
    else
        log "   ‚úÖ Nenhum NAT Gateway"
    fi
    
    if [ -n "$SECURITY_GROUPS" ]; then
        log "   üîí Security Groups: $SECURITY_GROUPS"
    else
        log "   ‚úÖ Nenhum Security Group customizado"
    fi
    
    if [ -n "$IGW" ] && [ "$IGW" != "None" ]; then
        log "   üåê Internet Gateway: $IGW"
    else
        log "   ‚úÖ Nenhum Internet Gateway"
    fi
    
    if [ -n "$SUBNETS" ]; then
        log "   üåê Subnets: $SUBNETS"
    else
        log "   ‚úÖ Nenhuma Subnet"
    fi
    
    # =============================================================================
    # CONFIRMA√á√ÉO
    # =============================================================================
    
    echo
    warning "‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover a VPC $VPC_ID!"
    
    if [ -n "$EC2_INSTANCES$RDS_INSTANCES$ELB_V1$ELB_V2" ]; then
        warning "‚ö†Ô∏è  Existem recursos ativos que ser√£o removidos!"
    fi
    
    echo
    read -p "ü§î Continuar com a remo√ß√£o? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        warning "‚ùå Remo√ß√£o cancelada"
        exit 1
    fi
    
    # =============================================================================
    # EXECUTAR REMO√á√ÉO
    # =============================================================================
    
    log "üóëÔ∏è  Iniciando remo√ß√£o da VPC $VPC_ID..."
    
    # Remover EC2 Instances
    if [ -n "$EC2_INSTANCES" ]; then
        log "üóëÔ∏è  Removendo EC2 Instances..."
        for instance in $EC2_INSTANCES; do
            aws ec2 terminate-instances --instance-ids "$instance" >/dev/null
            log "   ‚úÖ Instance $instance terminada"
        done
    fi
    
    # Remover RDS Instances
    if [ -n "$RDS_INSTANCES" ]; then
        log "üóëÔ∏è  Removendo RDS Instances..."
        for rds in $RDS_INSTANCES; do
            aws rds delete-db-instance \
                --db-instance-identifier "$rds" \
                --skip-final-snapshot \
                --delete-automated-backups >/dev/null
            log "   ‚úÖ RDS Instance $rds removida"
        done
    fi
    
    # Remover ELB V1
    if [ -n "$ELB_V1" ]; then
        log "üóëÔ∏è  Removendo ELB V1..."
        for elb in $ELB_V1; do
            aws elb delete-load-balancer --load-balancer-name "$elb" >/dev/null
            log "   ‚úÖ ELB V1 $elb removido"
        done
    fi
    
    # Remover ELB V2
    if [ -n "$ELB_V2" ]; then
        log "üóëÔ∏è  Removendo ELB V2..."
        for elb in $ELB_V2; do
            aws elbv2 delete-load-balancer --load-balancer-arn "$elb" >/dev/null
            log "   ‚úÖ ELB V2 $elb removido"
        done
    fi
    
    # Remover NAT Gateways
    if [ -n "$NAT_GATEWAYS" ]; then
        log "üóëÔ∏è  Removendo NAT Gateways..."
        for nat in $NAT_GATEWAYS; do
            aws ec2 delete-nat-gateway --nat-gateway-id "$nat" >/dev/null
            log "   ‚úÖ NAT Gateway $nat removido"
        done
    fi
    
    # Remover Security Groups
    if [ -n "$SECURITY_GROUPS" ]; then
        log "üóëÔ∏è  Removendo Security Groups..."
        for sg in $SECURITY_GROUPS; do
            aws ec2 delete-security-group --group-id "$sg" >/dev/null 2>&1 || true
            log "   ‚úÖ Security Group $sg removido"
        done
    fi
    
    # Desanexar e remover Internet Gateway
    if [ -n "$IGW" ] && [ "$IGW" != "None" ]; then
        log "üóëÔ∏è  Removendo Internet Gateway..."
        aws ec2 detach-internet-gateway --internet-gateway-id "$IGW" --vpc-id "$VPC_ID" >/dev/null 2>&1 || true
        aws ec2 delete-internet-gateway --internet-gateway-id "$IGW" >/dev/null 2>&1 || true
        log "   ‚úÖ Internet Gateway $IGW removido"
    fi
    
    # Remover Subnets
    if [ -n "$SUBNETS" ]; then
        log "üóëÔ∏è  Removendo Subnets..."
        for subnet in $SUBNETS; do
            aws ec2 delete-subnet --subnet-id "$subnet" >/dev/null 2>&1 || true
            log "   ‚úÖ Subnet $subnet removida"
        done
    fi
    
    # =============================================================================
    # REMOVER VPC
    # =============================================================================
    
    log "üóëÔ∏è  Removendo VPC..."
    
    # Aguardar um pouco para garantir que recursos foram removidos
    sleep 10
    
    # Tentar remover a VPC
    if aws ec2 delete-vpc --vpc-id "$VPC_ID" >/dev/null 2>&1; then
        success "‚úÖ VPC $VPC_ID removida com sucesso!"
    else
        warning "‚ö†Ô∏è  N√£o foi poss√≠vel remover a VPC automaticamente."
        warning "üí° Execute manualmente: aws ec2 delete-vpc --vpc-id $VPC_ID"
    fi
    
    echo
    success "üéâ Remo√ß√£o conclu√≠da!"
    echo
    log "üìä Resumo da remo√ß√£o:"
    log "   ‚úÖ VPC $VPC_ID removida"
    log "   ‚úÖ Recursos associados removidos"
}

# Executa a fun√ß√£o principal
main "$@" 